{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Cassandra, RabbitMQ, Celery workers and main instance",
  "Parameters" : {
    "GitRevision" : {
      "Type" : "String",
      "Default" : "production",
      "Description" : "The git revision the instances will run on"
    },
    "CassandraInstanceType" : {
      "Type" : "String",
      "Default" : "i2.xlarge",
      "Description" : "Please provide the instance type"
    },
    "CassandraClusterSize" : {
      "Type" : "Number",
      "Default" : "1",
      "Description" : "How many instances do you want to use for the Cassandra's cluster?"
    },
    "RabbitMQInstanceType" : {
      "Type" : "String",
      "Default" : "t2.micro",
      "Description" : "Please provide the instance type"
    },
    "CeleryInstanceType" : {
      "Type" : "String",
      "Default" : "t2.micro",
      "Description" : "Please provide the instance type"
    },
    "DatadogAPIKey" : {
      "Type" : "String",
      "Default" : "none",
      "Description" : "Your DataDog API key (optional)"
    },
    "BenchUserPassword" : {
      "Type" : "String",
      "Default" : "bench2016",
      "Description" : "Please specify the password for the (super)user 'bench'"
    }
  },
  "Mappings" : {
    "BenchMap": {
      "SettingsMap": {
        "AvailabilityZones": ["us-east-1c"],
        "VpcId" : "vpc-90bc4cf5",
        "VpcCidrBlock" : "172.31.0.0/16",
        "KeyName": "StreamFrameworkBench",
        "GitRepo": "https://github.com/getstream/stream-framework-bench"
      },
      "CassandraMap": {
        "AMI" : "ami-711ca91a"
      },
      "RabbitMap": {
        "AMI" : "ami-fce3c696"
      },
      "CeleryMap": {
        "AMI" : "ami-fce3c696"
      }
    }
  },
  "Resources": {

    "BenchRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [ "ec2.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/BenchRole/",
        "Policies": [
          {
            "PolicyDocument" : {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "Stmt1458578116000",
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeInstanceAttribute",
                    "ec2:DescribeInstanceStatus",
                    "ec2:DescribeInstances",
                    "ec2:DescribeNetworkInterfaceAttribute",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DescribeTags"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            },
            "PolicyName" : "DescribeTagsBenchRole"
          }
        ]
      }
    },
    "BenchProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/BenchProfile/",
        "Roles": [{ "Ref": "BenchRole" }]
      }
    },

    "CassandraSecurityGroupIngress1" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupName" : { "Ref" : "CassandraSecurityGroup" },
        "IpProtocol" : "tcp",
        "ToPort" : "7000",
        "FromPort" : "7000",
        "SourceSecurityGroupName" : { "Ref" : "CassandraSecurityGroup" }
      }
    },

    "CassandraSecurityGroupIngress2" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupName" : { "Ref" : "CassandraSecurityGroup" },
        "IpProtocol" : "tcp",
        "ToPort" : "7199",
        "FromPort" : "7199",
        "SourceSecurityGroupName" : { "Ref" : "CassandraSecurityGroup" }
      }
    },

    "CassandraSecurityGroupIngress3" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupName" : { "Ref" : "CassandraSecurityGroup" },
        "IpProtocol" : "tcp",
        "ToPort" : "9042",
        "FromPort" : "9042",
        "SourceSecurityGroupName" : { "Ref" : "CassandraSecurityGroup" }
      }
    },

    "CassandraSecurityGroupIngress4" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupName" : { "Ref" : "CassandraSecurityGroup" },
        "IpProtocol" : "tcp",
        "ToPort" : "9160",
        "FromPort" : "9160",
        "SourceSecurityGroupName" : { "Ref" : "CassandraSecurityGroup" }
      }
    },

    "CassandraSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access via port 80 and SSH access",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "9042", "ToPort" : "9042", "SourceSecurityGroupName" : { "Ref" : "CelerySecurityGroup" }}
        ]
      }
    },

    "CassandraAutoscaling": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones" : {"Fn::FindInMap" : [ "BenchMap", "SettingsMap", "AvailabilityZones" ]},
        "Cooldown": "300",
        "MaxSize": { "Ref": "CassandraClusterSize" },
        "MinSize": { "Ref": "CassandraClusterSize" },
        "HealthCheckGracePeriod": "300",
        "HealthCheckType": "EC2",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "", [ "stream-bench-cassandra-", { "Ref": "AWS::StackName" }] ]},
            "PropagateAtLaunch": "true"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "Cassandra"
        }
      }
    },

    "Cassandra": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "BenchMap", "CassandraMap", "AMI" ]},
        "InstanceType": { "Ref": "CassandraInstanceType" },
        "KeyName": {"Fn::FindInMap" : [ "BenchMap", "SettingsMap", "KeyName" ]},
        "SecurityGroups": [{ "Ref" : "CassandraSecurityGroup" }],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "--clustername benchmark --totalnodes ",
                { "Ref": "CassandraClusterSize" },
                " --version community --release 3.3 --repository https://github.com/riptano/ComboAMI#2.6.3 --bootstrap --opscenter no"
              ]
            ]
          }
        }
      }
    },

    "RabbitSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access via port 80 and SSH access",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "5672", "ToPort" : "5672", "SourceSecurityGroupName" : { "Ref" : "CelerySecurityGroup" }},
          {"IpProtocol" : "tcp", "FromPort" : "15672", "ToPort" : "15672", "CidrIp" : "0.0.0.0/0"}
        ]
      }
    },

    "RabbitAutoScaling": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones" : {"Fn::FindInMap" : [ "BenchMap", "SettingsMap", "AvailabilityZones" ]},
        "Cooldown": "300",
        "MaxSize": "1",
        "MinSize": "1",
        "HealthCheckGracePeriod": "300",
        "HealthCheckType": "EC2",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "", [ "stream-bench-rabbit-", { "Ref": "AWS::StackName" }] ]},
            "PropagateAtLaunch": "true"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "Rabbit"
        }
      }
    },

    "Rabbit": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "BenchMap", "RabbitMap", "AMI" ]},
        "InstanceType": { "Ref": "RabbitMQInstanceType" },
        "KeyName": {"Fn::FindInMap" : [ "BenchMap", "SettingsMap", "KeyName" ]},
        "SecurityGroups": [{ "Ref" : "RabbitSecurityGroup" }],
        "IamInstanceProfile": { "Ref": "BenchProfile" },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config",
                "\n",
                "packages:",
                "\n",
                " - git",
                "\n",
                " - gcc",
                "\n",
                " - python-dev",
                "\n",
                " - libev4",
                "\n",
                " - libev-dev",
                "\n",
                " - python-pip",
                "\n",
                " - rabbitmq-server",
                "\n\n",
                "runcmd:",
                "\n",
                " - mkdir -p /srv/bench/",
                "\n",
                " - /usr/bin/git clone ",
                {"Fn::FindInMap" : [ "BenchMap", "SettingsMap", "GitRepo" ]},
                " /srv/bench/sfb",
                "\n",
                " - pip install -r /srv/bench/sfb/requirements.txt",
                "\n",
                " - python /srv/bench/sfb/get_ip.py --tag-name stream-bench-rabbit-", { "Ref": "AWS::StackName" }, " > /srv/bench/sfb/rabbit.ipv4",
                "\n",
                " - python /srv/bench/sfb/get_ip.py --tag-name stream-bench-cassandra-", { "Ref": "AWS::StackName" }, " > /srv/bench/sfb/cassandra.ipv4",
                "\n",
                " - sudo groupadd bench && sudo useradd -p `perl -e \"print crypt('", { "Ref": "BenchUserPassword" },"','sa');\"` -g bench -G sudo bench",
                "\n",
                " - DD_API_KEY=",
                { "Ref" : "DatadogAPIKey" },
                " bash -c \"$(curl -L https://raw.githubusercontent.com/DataDog/dd-agent/master/packaging/datadog-agent/source/install_agent.sh)\"",
                "\n"
              ]
            ]
          }
        }
      }
    },

    "CelerySecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access via port 80 and SSH access",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"}
        ]
      }
    },

    "CeleryAutoScaling": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones" : {"Fn::FindInMap" : [ "BenchMap", "SettingsMap", "AvailabilityZones" ]},
        "Cooldown": "300",
        "MaxSize": "1",
        "MinSize": "1",
        "HealthCheckGracePeriod": "300",
        "HealthCheckType": "EC2",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "", [ "stream-bench-celery-", { "Ref": "AWS::StackName" }] ]},
            "PropagateAtLaunch": "true"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "Celery"
        }
      }
    },

    "Celery": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "BenchMap", "CeleryMap", "AMI" ]},
        "InstanceType": { "Ref": "CeleryInstanceType" },
        "KeyName": {"Fn::FindInMap" : [ "BenchMap", "SettingsMap", "KeyName" ]},
        "SecurityGroups": [{ "Ref" : "CelerySecurityGroup" }],
        "IamInstanceProfile": { "Ref": "BenchProfile" },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config",
                "\n",
                "packages:",
                "\n",
                " - git",
                "\n",
                " - gcc",
                "\n",
                " - python-dev",
                "\n",
                " - libev4",
                "\n",
                " - libev-dev",
                "\n",
                " - python-boto",
                "\n",
                " - python-pip",
                "\n\n",
                "runcmd:",
                "\n",
                " - mkdir -p /srv/bench/",
                "\n",
                " - /usr/bin/git clone ", {"Fn::FindInMap" : [ "BenchMap", "SettingsMap", "GitRepo" ]}, " /srv/bench/sfb",
                "\n",
                " - sudo groupadd bench && sudo useradd -m -s /bin/bash -p `perl -e \"print crypt('", { "Ref": "BenchUserPassword" },"','sa');\"` -g bench -G sudo bench",
                "\n",
                " - printf '\\nMatch User %s\\n\\tPasswordAuthentication yes\\n' bench | sudo tee -a /etc/ssh/sshd_config && sudo service ssh restart",
                "\n",
                " - pip install -r /srv/bench/sfb/requirements.txt",
                "\n",
                " - python /srv/bench/sfb/get_ip.py --tag-name stream-bench-rabbit-", { "Ref": "AWS::StackName" }, " > /srv/bench/sfb/rabbit.ipv4",
                "\n",
                " - python /srv/bench/sfb/get_ip.py --tag-name stream-bench-cassandra-", { "Ref": "AWS::StackName" }, " > /srv/bench/sfb/cassandra.ipv4",
                "\n",
                " - DD_API_KEY=",
                { "Ref" : "DatadogAPIKey" },
                " bash -c \"$(curl -L https://raw.githubusercontent.com/DataDog/dd-agent/master/packaging/datadog-agent/source/install_agent.sh)\"",
                "\n",
                " - C_FORCE_ROOT=1 ENVIRONMENT=production celery -A benchmark worker -l debug --workdir /srv/bench/sfb",
                "\n"
              ]
            ]
          }
        }
      }
    }
  }
}